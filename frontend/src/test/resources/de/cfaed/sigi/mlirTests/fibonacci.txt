module {
    // fib_naive: int -> int
    func.func @fib_naive(%e0: !sigi.env) -> !sigi.env {
        %e1, %1 = sigi.pop %e0: i32 // n
        %e2 = sigi.push %e1, %1: i32
        %2 = arith.constant 1: i32
        %e3 = sigi.push %e2, %2: i32
        %e4, %3 = sigi.pop %e3: i32
        %e5, %4 = sigi.pop %e4: i32
        %5 = arith.cmpi "sle", %3, %4: i32
        %e6 = sigi.push %e5, %5: i1
        %6 = func.constant @quote1: !sigi.env -> !sigi.env // (-> int)
        %e7 = sigi.push %e6, %6: !sigi.env -> !sigi.env
        %7 = func.constant @quote2: !sigi.env -> !sigi.env // (-> int)
        %e8 = sigi.push %e7, %7: !sigi.env -> !sigi.env
        %e9 = func.call @":if:"(%e8) : !sigi.env -> !sigi.env
        return %e9: !sigi.env
    }
    // fib_tailrec: int -> int
    func.func @fib_tailrec(%e0: !sigi.env) -> !sigi.env {
        %1 = arith.constant 1: i32
        %e1 = sigi.push %e0, %1: i32
        %2 = arith.constant 1: i32
        %e2 = sigi.push %e1, %2: i32
        %e3 = func.call @fib_tailrec_helper(%e2) : !sigi.env -> !sigi.env
        return %e3: !sigi.env
    }
    // fib_tailrec_helper: int, int, int -> int
    func.func @fib_tailrec_helper(%e0: !sigi.env) -> !sigi.env {
        %e1, %1 = sigi.pop %e0: i32 // n
        %e2, %2 = sigi.pop %e1: i32 // a
        %e3, %3 = sigi.pop %e2: i32 // b
        %e4 = sigi.push %e3, %1: i32
        %4 = arith.constant 0: i32
        %e5 = sigi.push %e4, %4: i32
        %e6, %5 = sigi.pop %e5: i32
        %e7, %6 = sigi.pop %e6: i32
        %7 = arith.cmpi "eq", %5, %6: i32
        %e8 = sigi.push %e7, %7: i1
        %8 = func.constant @quote3: !sigi.env -> !sigi.env // (-> int)
        %e9 = sigi.push %e8, %8: !sigi.env -> !sigi.env
        %9 = func.constant @quote4: !sigi.env -> !sigi.env // (-> int)
        %e10 = sigi.push %e9, %9: !sigi.env -> !sigi.env
        %e11 = func.call @":if:"(%e10) : !sigi.env -> !sigi.env
        return %e11: !sigi.env
    }
    // __main__: ->
    func.func @__main__(%e0: !sigi.env) -> !sigi.env {
        %1 = arith.constant 20: i32
        %e1 = sigi.push %e0, %1: i32
        %e2 = func.call @fib_tailrec(%e1) : !sigi.env -> !sigi.env
        %2 = arith.constant 20: i32
        %e3 = sigi.push %e2, %2: i32
        %e4 = func.call @fib_naive(%e3) : !sigi.env -> !sigi.env
        %e5, %3 = sigi.pop %e4: i32
        %e6, %4 = sigi.pop %e5: i32
        %5 = arith.cmpi "eq", %3, %4: i32
        %e7 = sigi.push %e6, %5: i1
        %e8 = func.call @show(%e7) : !sigi.env -> !sigi.env
        return %e8: !sigi.env
    }
    // quote1: -> int
    func.func @quote1(%e0: !sigi.env) -> !sigi.env {
        %1 = arith.constant 1: i32
        %e1 = sigi.push %e0, %1: i32
        return %e1: !sigi.env
    }
    // quote2: -> int
    func.func @quote2(%e0: !sigi.env) -> !sigi.env {
        %e1 = sigi.error %e0, {msg="undefined name 'n'"}
        %1 = arith.constant 2: i32
        %e2 = sigi.push %e1, %1: i32
        %e3, %2 = sigi.pop %e2: i32
        %e4, %3 = sigi.pop %e3: i32
        %4 = arith.subi %2, %3: i32
        %e5 = sigi.push %e4, %4: i32
        %e6 = func.call @fib_naive(%e5) : !sigi.env -> !sigi.env
        %e7 = sigi.error %e6, {msg="undefined name 'n'"}
        %5 = arith.constant 1: i32
        %e8 = sigi.push %e7, %5: i32
        %e9, %6 = sigi.pop %e8: i32
        %e10, %7 = sigi.pop %e9: i32
        %8 = arith.subi %6, %7: i32
        %e11 = sigi.push %e10, %8: i32
        %e12, %9 = sigi.pop %e11: i32
        %e13, %10 = sigi.pop %e12: i32
        %11 = arith.addi %9, %10: i32
        %e14 = sigi.push %e13, %11: i32
        %e15 = func.call @fib_naive(%e14) : !sigi.env -> !sigi.env
        return %e15: !sigi.env
    }
    // quote3: -> int
    func.func @quote3(%e0: !sigi.env) -> !sigi.env {
        %e1 = sigi.error %e0, {msg="undefined name 'a'"}
        return %e1: !sigi.env
    }
    // quote4: -> int
    func.func @quote4(%e0: !sigi.env) -> !sigi.env {
        %e1 = sigi.error %e0, {msg="undefined name 'n'"}
        %1 = arith.constant 1: i32
        %e2 = sigi.push %e1, %1: i32
        %e3, %2 = sigi.pop %e2: i32
        %e4, %3 = sigi.pop %e3: i32
        %4 = arith.cmpi "eq", %2, %3: i32
        %e5 = sigi.push %e4, %4: i1
        %5 = func.constant @quote5: !sigi.env -> !sigi.env // (-> int)
        %e6 = sigi.push %e5, %5: !sigi.env -> !sigi.env
        %6 = func.constant @quote6: !sigi.env -> !sigi.env // (-> int)
        %e7 = sigi.push %e6, %6: !sigi.env -> !sigi.env
        %e8 = func.call @":if:"(%e7) : !sigi.env -> !sigi.env
        return %e8: !sigi.env
    }
    // quote5: -> int
    func.func @quote5(%e0: !sigi.env) -> !sigi.env {
        %e1 = sigi.error %e0, {msg="undefined name 'b'"}
        return %e1: !sigi.env
    }
    // quote6: -> int
    func.func @quote6(%e0: !sigi.env) -> !sigi.env {
        %e1 = sigi.error %e0, {msg="undefined name 'n'"}
        %1 = arith.constant 1: i32
        %e2 = sigi.push %e1, %1: i32
        %e3, %2 = sigi.pop %e2: i32
        %e4, %3 = sigi.pop %e3: i32
        %4 = arith.subi %2, %3: i32
        %e5 = sigi.push %e4, %4: i32
        %e6 = sigi.error %e5, {msg="undefined name 'b'"}
        %e7 = sigi.error %e6, {msg="undefined name 'a'"}
        %e8 = sigi.error %e7, {msg="undefined name 'b'"}
        %e9, %5 = sigi.pop %e8: i32
        %e10, %6 = sigi.pop %e9: i32
        %7 = arith.addi %5, %6: i32
        %e11 = sigi.push %e10, %7: i32
        %e12 = func.call @fib_tailrec_helper(%e11) : !sigi.env -> !sigi.env
        return %e12: !sigi.env
    }
}
