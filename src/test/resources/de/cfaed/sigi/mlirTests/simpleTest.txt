
module {
    // double: int -> int
    func.func @double(%e0: !sigi.stack) -> !sigi.stack {
        %e1, %1 = sigi.pop %e0: i32
        %e2 = sigi.push %e1, %1: i32
        %e3 = sigi.push %e2, %1: i32
        %e4, %2 = sigi.pop %e3: i32
        %e5, %3 = sigi.pop %e4: i32
        %4 = arith.addi %2, %3: i32
        %e6 = sigi.push %e5, %4: i32
        return %e6: !sigi.stack
    }
    // __main__: ->
    func.func @__main__(%e0: !sigi.stack) -> !sigi.stack {
        %1 = arith.constant 2: i32
        %e1 = sigi.push %e0, %1: i32
        %e2 = func.call @double(%e1) : (!sigi.stack) -> !sigi.stack
        %e3 = func.call @double(%e2) : (!sigi.stack) -> !sigi.stack
        %2 = arith.constant 8: i32
        %e4 = sigi.push %e3, %2: i32
        %e5, %3 = sigi.pop %e4: i32
        %e6, %4 = sigi.pop %e5: i32
        %5 = arith.cmpi "eq", %3, %4: i32
        %e7 = sigi.push %e6, %5: i1
        %e8 = func.call @show(%e7) : (!sigi.stack) -> !sigi.stack
        return %e8: !sigi.stack
    }
}
