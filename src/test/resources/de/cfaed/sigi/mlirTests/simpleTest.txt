module {
    func.func private @"sigi::show"(!sigi.stack) -> !sigi.stack
    // double: int -> int
    func.func private @double(%s0: !sigi.stack) -> !sigi.stack {
        // dup intrinsic
        %s1, %v1 = sigi.pop %s0: i32
        %s2 = sigi.push %s1, %v1: i32
        %s3 = sigi.push %s2, %v1: i32
        // +
        %s4, %v2 = sigi.pop %s3: i32
        %s5, %v3 = sigi.pop %s4: i32
        %v4 = arith.addi %v2, %v3: i32
        %s6 = sigi.push %s5, %v4: i32
        return %s6: !sigi.stack
    }
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %v1 = arith.constant 2: i32
        %s1 = sigi.push %s0, %v1: i32
        %s2 = func.call @double(%s1) : (!sigi.stack) -> !sigi.stack // int -> int
        %s3 = func.call @double(%s2) : (!sigi.stack) -> !sigi.stack // int -> int
        %v2 = arith.constant 8: i32
        %s4 = sigi.push %s3, %v2: i32
        // =
        %s5, %v3 = sigi.pop %s4: i32
        %s6, %v4 = sigi.pop %s5: i32
        %v5 = arith.cmpi "eq", %v3, %v4: i32
        %s7 = sigi.push %s6, %v5: i1
        %s8 = func.call @"sigi::show"(%s7) : (!sigi.stack) -> !sigi.stack // bool ->
        return %s8: !sigi.stack
    }
}
