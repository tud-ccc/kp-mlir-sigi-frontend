module {
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %v1 = arith.constant 1: i32
        %s1 = sigi.push %s0, %v1: i32
        // -> x;
        %s2, %v2_x = sigi.pop %s1: i32 // x: int
        %s3 = sigi.push %s2, %v2_x: i32 // push x
        %s4 = sigi.push %s3, %v2_x: i32 // push x
        // +
        %s5, %v3 = sigi.pop %s4: i32
        %s6, %v4 = sigi.pop %s5: i32
        %v5 = arith.addi %v4, %v3: i32
        %s7 = sigi.push %s6, %v5: i32
        %s8, %v6 = sigi.pop %s7: i32 // pop intrinsic
        %s9 = sigi.push %s8, %v2_x: i32 // push x
        %s10 = sigi.push %s9, %v2_x: i32 // push x
        // -
        %s11, %v7 = sigi.pop %s10: i32
        %s12, %v8 = sigi.pop %s11: i32
        %v9 = arith.subi %v8, %v7: i32
        %s13 = sigi.push %s12, %v9: i32
        %s14, %v10 = sigi.pop %s13: i32 // pop intrinsic
        %s15 = sigi.push %s14, %v2_x: i32 // push x
        %s16 = sigi.push %s15, %v2_x: i32 // push x
        // *
        %s17, %v11 = sigi.pop %s16: i32
        %s18, %v12 = sigi.pop %s17: i32
        %v13 = arith.muli %v12, %v11: i32
        %s19 = sigi.push %s18, %v13: i32
        %s20, %v14 = sigi.pop %s19: i32 // pop intrinsic
        %s21 = sigi.push %s20, %v2_x: i32 // push x
        %s22 = sigi.push %s21, %v2_x: i32 // push x
        // /
        %s23, %v15 = sigi.pop %s22: i32
        %s24, %v16 = sigi.pop %s23: i32
        %v17 = arith.divi %v16, %v15: i32
        %s25 = sigi.push %s24, %v17: i32
        %s26, %v18 = sigi.pop %s25: i32 // pop intrinsic
        %s27 = sigi.push %s26, %v2_x: i32 // push x
        %s28 = sigi.push %s27, %v2_x: i32 // push x
        // %
        %s29, %v19 = sigi.pop %s28: i32
        %s30, %v20 = sigi.pop %s29: i32
        %v21 = arith.modi %v20, %v19: i32
        %s31 = sigi.push %s30, %v21: i32
        %s32, %v22 = sigi.pop %s31: i32 // pop intrinsic
        %s33 = sigi.push %s32, %v2_x: i32 // push x
        // unary_-
        %v23 = arith.constant 0: i32
        %s34, %v24 = sigi.pop %s33: i32
        %v25 = arith.subi %v23, %v24: i32
        %s35 = sigi.push %s34, %v25: i32
        %s36, %v26 = sigi.pop %s35: i32 // pop intrinsic
        %s37 = sigi.push %s36, %v2_x: i32 // push x
        %s38, %v27 = sigi.pop %s37: i32 // pop intrinsic
        %s39 = sigi.push %s38, %v2_x: i32 // push x
        // unary_~
        %v28 = arith.constant 1: i32
        %s40, %v29 = sigi.pop %s39: i32
        %v30 = arith.xori %v28, %v29: i32
        %s41 = sigi.push %s40, %v30: i32
        %s42, %v31 = sigi.pop %s41: i32 // pop intrinsic
        %v32 = arith.constant 1: i1
        %s43 = sigi.push %s42, %v32: i1
        // -> b;
        %s44, %v33_b = sigi.pop %s43: i1 // b: bool
        %s45 = sigi.push %s44, %v33_b: i1 // push b
        // unary_!
        %v34 = arith.constant 1: i1
        %s46, %v35 = sigi.pop %s45: i1
        %v36 = arith.xori %v34, %v35: i1
        %s47 = sigi.push %s46, %v36: i1
        %s48, %v37 = sigi.pop %s47: i1 // pop intrinsic
        return %s48: !sigi.stack
    }
}
