module {
    // id: int -> int
    func.func private @id(%s0: !sigi.stack) -> !sigi.stack {
        // -> x;
        %s1, %v1_x = sigi.pop %s0: i32 // x: int
        %s2 = sigi.push %s1, %v1_x: i32 // push x
        return %s2: !sigi.stack
    }
    // test0: ->
    func.func private @test0(%s0: !sigi.stack) -> !sigi.stack {
        %v1 = arith.constant 1: i32
        %s1 = sigi.push %s0, %v1: i32
        %s2 = func.call @id(%s1) : (!sigi.stack) -> !sigi.stack // int -> int
        %s3 = func.call @id(%s2) : (!sigi.stack) -> !sigi.stack // int -> int
        %s4 = func.call @id(%s3) : (!sigi.stack) -> !sigi.stack // int -> int
        %s5, %v2 = sigi.pop %s4: i32 // pop intrinsic
        return %s5: !sigi.stack
    }
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %s1 = func.call @test0(%s0) : (!sigi.stack) -> !sigi.stack // ->
        return %s1: !sigi.stack
    }
}
