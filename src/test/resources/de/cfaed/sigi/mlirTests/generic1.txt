module {
    func.func private @"sigi::pp"(!sigi.stack) -> !sigi.stack
    // show: int ->
    func.func private @show(%s0: !sigi.stack) -> !sigi.stack {
        %s1 = func.call @"sigi::pp"(%s0) : (!sigi.stack) -> !sigi.stack // int -> int
        %s2, %v1 = sigi.pop %s1: i32 // pop intrinsic
        return %s2: !sigi.stack
    }
    // swap: int, int -> int, int
    func.func private @swap(%s0: !sigi.stack) -> !sigi.stack {
        // -> a, b;
        %s1, %v1_a = sigi.pop %s0: i32 // a: int
        %s2, %v2_b = sigi.pop %s1: i32 // b: int
        %s3 = sigi.push %s2, %v2_b: i32 // push b
        %s4 = sigi.push %s3, %v1_a: i32 // push a
        return %s4: !sigi.stack
    }
    // genericDrop: int, int -> int
    func.func private @genericDrop(%s0: !sigi.stack) -> !sigi.stack {
        %s1 = func.call @swap(%s0) : (!sigi.stack) -> !sigi.stack // int, int -> int, int
        %s2, %v1 = sigi.pop %s1: i32 // pop intrinsic
        return %s2: !sigi.stack
    }
    // __main__: ->
    func.func @__main__(%s0: !sigi.stack) -> !sigi.stack attributes {sigi.main} {
        %v1 = arith.constant 1: i32
        %s1 = sigi.push %s0, %v1: i32
        %v2 = arith.constant 2: i32
        %s2 = sigi.push %s1, %v2: i32
        %v3 = arith.constant 3: i32
        %s3 = sigi.push %s2, %v3: i32
        %s4 = func.call @genericDrop(%s3) : (!sigi.stack) -> !sigi.stack // int, int -> int
        // +
        %s5, %v4 = sigi.pop %s4: i32
        %s6, %v5 = sigi.pop %s5: i32
        %v6 = arith.addi %v4, %v5: i32
        %s7 = sigi.push %s6, %v6: i32
        %s8 = func.call @show(%s7) : (!sigi.stack) -> !sigi.stack // int ->
        return %s8: !sigi.stack
    }
}
