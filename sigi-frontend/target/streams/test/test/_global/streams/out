[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.cfaed.sigi.EvalSpec, org.scalatest.tools.Framework$$anon$1@3ff20690, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.cfaed.sigi.TypeOpsSpec, org.scalatest.tools.Framework$$anon$1@3ff20690, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.cfaed.sigi.ParserSpec, org.scalatest.tools.Framework$$anon$1@3ff20690, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.cfaed.sigi.TypeInfSpec, org.scalatest.tools.Framework$$anon$1@3ff20690, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.cfaed.sigi.MlirCompilSpec, org.scalatest.tools.Framework$$anon$1@3ff20690, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTypeOpsSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 'b, 'a -> 'a should canonicalize to 'a, 'b -> 'b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMlirCompilSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- simpleTest.sigi *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  null equaled null (MlirCompilSpec.scala:33)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEvalSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 should result in stack: List(2, 1)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- {->a,b; b} -> snd; 1 2 snd should result in stack: List(2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- {->a,b; b} -> snd; 1 (2 snd) should result in stack: List(2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- "a" 2 {->a,b; b} -> snd; snd should result in stack: List(2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 2 pop should result in stack: List()[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 2 dup pop should result in stack: List(2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- if (true) { 1 } else { 2 } should result in stack: List(1)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- [1, 2] should result in stack: List([1, 2])[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mParserSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 3[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 show[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- { show }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- \show[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- \*[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- true[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- false[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m-  "a" "b"  [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; x y[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; y[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- if (true) { 1 } else { 2 }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- if { 1 } else { 2 }[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; x * y[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- define double(int-> int): ->x; 2*x;;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- define id('a -> 'a): ->x; x;;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTypeInfSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 \swap should have type -> int, int, ('a, 'b -> 'b, 'a)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 \swap apply should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- \swap apply should have type 'a, 'b -> 'b, 'a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 swap should have type 'a -> int, 'a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 \swap apply should have type 'a -> int, 'a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 pop should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- { pop } should have type -> ('a ->)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; x y should have type 'a, 'b -> 'a, 'b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x; should have type 'a ->[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; y should have type 'a, 'b -> 'b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- if (true) { 1 } else { 2 } should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- if { 1 } else { 2 } should have type bool -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- true if { 1 } else { 2 } should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- {->a,b;b} -> snd; 1 2 snd should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 -> x, y; x y should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- (1 2 -> x, y;) x y should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 ((-> x, y; x) y) should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- 1 2 (-> x, y; (x y)) should have type -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- [] should have type -> List['a][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- [2] should have type -> List[int][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- [{->x; x}] should have type -> List[('a -> 'a)][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; [x, y] should have type 'a, 'a -> List['a][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; x * y should have type int, int -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- -> x, y; x x * y should have type int, int -> int, int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- "a" 2 {->a,b; b} -> snd; snd should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- (1 true) pop should have type -> int[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- \dup dup should have type -> ('a -> 'a, 'a), ('a -> 'a, 'a)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 239 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 55[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 5, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 54, failed 1, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m*** 1 TEST FAILED ***[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.cfaed.sigi.TypeOpsSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.cfaed.sigi.EvalSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.cfaed.sigi.TypeInfSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.cfaed.sigi.ParserSpec[0m
[0m[[0m[31merror[0m] [0m[0mFailed tests:[0m
[0m[[0m[31merror[0m] [0m[0m	de.cfaed.sigi.MlirCompilSpec[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mtest[0m) sbt.TestsFailedException: Tests unsuccessful[0m
